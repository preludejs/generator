import groupMap from './group-map.js'

/**
 * Creates a function that groups elements from an iterable based on keys generated by a mapping function.
 *
 * @template T - The type of elements in the input iterable
 * @template K - The type of keys used for grouping
 * @param keyOfValue - A function that extracts a key from each value
 * @returns A function that takes an iterable and yields entries of [key, group of values]
 * @yields Entries where each entry is a tuple of [key, values] with values being all elements that map to that key
 *
 * @example
 * ```typescript
 * // Group numbers by even/odd
 * const byParity = G.group(x => x % 2 === 0 ? 'even' : 'odd');
 * const result = Array.from(byParity([1, 2, 3, 4, 5]));
 * // [['odd', [1, 3, 5]], ['even', [2, 4]]]
 * ```
 *
 * @see groupMap - For getting a Map instead of entries iterator
 * @see groupObject - For getting an object instead of entries iterator
 */
export const group =
  <T, K>(keyOfValue: (value: T) => K) =>
    (values: Iterable<T>) =>
      groupMap(keyOfValue)(values).entries()

export default group
