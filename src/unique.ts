/**
 * Creates a generator that yields unique values from the source iterable based on keys generated by the provided function.
 *
 * @template T - The type of elements in the source iterable.
 * @param keyOfValue - Function that generates a string or number key for each element and its index.
 * @returns A generator function that takes an iterable and yields unique elements.
 * @yields Unique elements from the source iterable, where uniqueness is determined by the key function.
 *
 * @example
 * ```ts
 * G.pipe(
 *   [1, 2, 2, 3, 4, 4, 5],
 *   G.unique(x => x),
 *   G.array
 * ) // [1, 2, 3, 4, 5]
 *
 * G.pipe(
 *   [{id: 1, name: 'A'}, {id: 2, name: 'B'}, {id: 1, name: 'C'}],
 *   G.unique(x => x.id),
 *   G.array
 * ) // [{id: 1, name: 'A'}, {id: 2, name: 'B'}]
 * ```
 */
export const unique =
  <T>(keyOfValue: (value: T, index: number) => string | number) =>
    function* (values: Iterable<T>): Generator<T> {
      const seen = new Set<string | number>()
      let index = 0
      for (const value of values) {
        const key = keyOfValue(value, index++)
        if (!seen.has(key)) {
          seen.add(key)
          yield value
        }
      }
    }

export default unique
